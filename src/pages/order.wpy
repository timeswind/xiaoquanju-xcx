<template>
  <!--tab模块-->
  <view class="swiper-tab-pd">
    <tab @currentTab.user="getCurrentTab" :tabList.sync="tabList" :currentTab.sync="currentTab"></tab>
  </view>
  <scroll-view scroll-y="true" class="swiper-item-box">
    <orderItem :orderList.sync="orderList"></orderItem>
  </scroll-view>
</template>
<script>
import wepy from "wepy";
import Tab from "@/components/tab";
import { SYSTEM_INFO, USER_SPECICAL_INFO } from "@/utils/constant";
import OrderItem from "@/components/order_item";
import BottomLoadMore from "../components/common/bottomLoadMore";
import Placeholder from "../components/common/placeholder";
import api from "@/api/api";
export default class Order extends wepy.page {
  config = {
    navigationBarTitleText: "我的订单",
    enablePullDownRefresh: true
  };
  components = {
    tab: Tab,
    orderItem: OrderItem,
    bottomLoadMore: BottomLoadMore,
    placeholder: Placeholder
  };
  data = {
    winHeight: 0,
    tabList: ["全部", "待付款", "待收货", "已完成"],
    orderList: [],
    currentTab: 0,
    showLoading: false
  };

  computed = {
    emptyOrderList() {
      return this.orderList.length === 0;
    }
  };

  async getOrders() {
    const currentTab = this.currentTab;
    if (currentTab === 1) {
      const json = await api.getUnpaidOrders();
      if (json.data.success) {
        this.updateOrderList(json.data.orders);
      }
    } else if (currentTab === 2) {
      const json = await api.getPaidOrders();
      if (json.data.success) {
        this.updateOrderList(json.data.orders);
      }
    } else if (currentTab === 3) {
      const json = await api.getCompleteOrders();
      if (json.data.success) {
        this.updateOrderList(json.data.orders);
      }
    } else {
      const json = await api.getAllOrders();
      if (json.data.success) {
        this.updateOrderList(json.data.orders);
      }
    }
    this.$apply();
  }

  updateOrderList(orders) {
    const maporders = orders.map(order => {
      order["order_passed_hours"] =
        Math.abs(new Date() - new Date(order.created_at)) / 36e5;
      return order;
    });
    this.orderList = maporders;
  }

  onPullDownRefresh() {
    this.getOrders();
  }

  onLoad(options) {
    this.currentTab = options.tab || 0;
    this.getOrders();
  }

  methods = {
    getCurrentTab(cur, evt) {
      this.currentTab = cur;
      this.getOrders();
    },
    bindChange(e) {
      let that = this;
      that.currentTab = e.detail.current;
    }
  };
}
</script>
<style lang="less">
.swiper-tab-pd {
  background: #fff;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 999;
}

.swiper-item-box {
  padding-top: 80rpx;
}

.swiper-tab-order.active {
  color: #ff4856;
  border-bottom: 5rpx solid #ff4856;
}
</style>
