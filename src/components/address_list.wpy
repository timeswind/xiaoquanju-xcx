<template>
  <view class="address">
    <repeat for="{{list}}" key="index" item="item">
      <view class="list_box">
        <swipeDelete :swipeData="item" @delItem.user="handleDelItem">
          <view class="address_list" @tap="tapSelAddress" data-id="{{item._id}}" data-index="{{index}}">
            <view class="title">
              <view class="user_info">
                <text class="name">{{item.name}}</text>
                <text class="phone">{{item.phone}}</text>
              </view>
              <view class="active_address">
                <text class="defult" wx:if="{{item.isDefault}}"> [默认]</text>
                {{item.province}} {{item.city}} {{item.area}} {{item.street}}
              </view>
            </view>
            <view class="arrow"  @tap.stop="edit" data-index="{{index}}"><i class="iconfont icon-edit" ></i></view>
          </view>
        </swipeDelete>
      </view>
    </repeat>
  </view>
  <view class="add_wrap  {{isIphoneX ?'fix-iphonex-button':''}}">
      <view class="button type_red" @tap="add">新增地址</view>
  </view>
</template>
<script>
import wepy from "wepy";
import SwipeDelete from "./common/wepy-swipe-delete";
import tip from "@/utils/tip";
import api from "@/api/api";
import { USER_SPECICAL_INFO, ADDRESS_ID } from "@/utils/constant";
export default class AddressList extends wepy.component {
  props = {
    list: {
      type: Object,
      default: []
    }
  };
  components = {
    swipeDelete: SwipeDelete
  };

  data = {
    receiverInfo: {},
    type: "",
    isIphoneX: false
  };

  async delUserAddress(id) {
    const json = await api.deleteAddress({
      query: {
        id: id
      },
      method: "DELETE"
    });

    if (json.data.success) {
      this.$emit("currentPage", 0);
      this.$emit("refreshAddList", "hehe");
    }

    this.showLoading = false;
  }
  methods = {
    add() {
      //0 列表 1新增 2编辑
      this.$emit("currentPage", 1);
    },
    edit(e) {
      var index = e.currentTarget.dataset.index;
      //0 列表 1新增 2编辑
      console.log(this.list[index]);
      this.$emit("currentPage", 2, this.list[index]);
    },
    //左滑删除
    handleDelItem(itemData) {
      this.delUserAddress(itemData._id);
    },

    setOrgType(type) {
      this.type = type;
    },

    tapSelAddress(e) {
      if (this.type != "order") {
        return;
      }
      var index = e.currentTarget.dataset.index;

      wepy.setStorageSync(ADDRESS_ID, this.list[index]._id);

      wepy.navigateBack();
    }
  };

  onLoad() {
    if (this.$root.$parent.globalData.isIphoneX) {
      this.isIphoneX = true;
    }
  }
}
</script>
<style lang="less">
.list_box {
  height: 200rpx;
}

.address {
  padding-bottom: 80px;
  .list_box:last-child {
    border-bottom: 1px solid #efefef;
  }
  .address_list {
    display: flex;
    justify-content: space-between;
    height: 200rpx;
    align-items: center;
    padding: 0rpx 0px 0px 35rpx;
    border-top: 1px solid #efefef;
    .title {
      color: #000;
    }
    .arrow {
      height: 60rpx;
      width: 150rpx;
      text-align: center;
      color: #9a9a9a;
    }
    .user_info {
      color: #1a1a1a;
      .phone {
        margin-left: 8px;
      }
    }
    .active_address {
      margin-top: 8px;
      font-size: 16px;
      color: #333;
    }
    .defult {
      color: #ea4a3a;
    }
  }
}

.add_wrap {
  width: 100%;
  position: fixed;
  bottom: 0;
  z-index: 999;
}
</style>
