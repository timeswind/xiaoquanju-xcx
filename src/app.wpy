<style lang="less">
@import "./zanui/index.wxss";
</style>
<script>
import wepy from "wepy";
import "wepy-async-function";
import {
  TAGTRACK_ID,
  USER_SPECICAL_INFO,
  USER_INFO,
  SYSTEM_INFO
} from "@/utils/constant";
import api from "@/api/api";
import utils from "@/utils/util";

export default class extends wepy.app {
  config = {
    pages: [
      "pages/home",
      "pages/home_detail",
      "pages/classify",
      "pages/shop_cart",
      "pages/info",
      "pages/order",
      "pages/collection",
      "pages/setting",
      "pages/good_detail",
      "pages/confirm_order",
      "pages/address",
      "pages/order_detail",
      "pages/authorize"
    ],
    window: {
      backgroundTextStyle: "dark",
      navigationBarBackgroundColor: "#FFFFFF",
      navigationBarTitleText: "WeChat",
      navigationBarTextStyle: "black",
      enablePullDownRefresh: false,
      backgroundColor: "#EFEFEF"
    },
    tabBar: {
      color: "#515151",
      selectedColor: "#38a760",
      backgroundColor: "#ffffff",
      borderStyle: "black",
      list: [
        {
          pagePath: "pages/home",
          text: "首页",
          iconPath: "images/home.png",
          selectedIconPath: "images/home_fill.png"
        },
        {
          pagePath: "pages/classify",
          text: "分类",
          iconPath: "images/category.png",
          selectedIconPath: "images/category_fill.png"
        },
        {
          pagePath: "pages/shop_cart",
          text: "购物车",
          iconPath: "images/cart.png",
          selectedIconPath: "images/cart_fill.png"
        },
        {
          pagePath: "pages/info",
          text: "我",
          iconPath: "images/people.png",
          selectedIconPath: "images/people_fill.png"
        }
      ]
    },
    plugins: {
      wxparserPlugin: {
        version: "0.2.1",
        provider: "wx9d4d4ffa781ff3ac"
      }
    }
  };

  globalData = {
    isIphoneX: false
  };

  constructor() {
    super();
    this.use("requestfix");
    this.use("promisify");
  }

  onLaunch(option) {
    //get system info
    let systemInfo = wepy.getSystemInfoSync();
    wepy.setStorageSync(SYSTEM_INFO, systemInfo);
    if (systemInfo.model.indexOf("iPhone X") >= 0) {
      this.globalData.isIphoneX = true;
    }
    //get tagtrack data
    if ("tagtrack" in option.query) {
      wepy.setStorageSync(TAGTRACK_ID, option.query.tagtrack);
    }
    if (option.query && option.query.q) {
      let url = decodeURIComponent(option.query.q);
      let tagtrack_id = utils.getQueryString(url, "tagtrack");
      wepy.setStorageSync(TAGTRACK_ID, tagtrack_id);
      console.log("tagtrack_id", tagtrack_id);
    }
    console.log("option", option);

    let userInfo = wepy.getStorageSync(USER_INFO);
    let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO);
    console.log("userSpecialInfo", userSpecialInfo);
    if (utils.isObjectEmpty(userInfo) || utils.isObjectEmpty(userSpecialInfo)) {
      this.getSetting();
    } else {
      this.getTokenWithUnionId(userSpecialInfo.wx_unionid);
    }
  }

  async getSetting() {
    try {
      let res = await wepy.getSetting();
      console.log("wepy.getSetting()", res);
      if (res.authSetting["scope.userInfo"]) {
        console.log(res.authSetting["scope.userInfo"]);
        this.wxlogin();
      } else {
        console.log("naviagte to page authorize");
        this.toAuthorize();
      }
    } catch (error) {
      console.error("wepy.getSetting() ERROR", error);
      console.log("wepy.getSetting() ERROR 应该网络不佳");
    }
  }

  async toAuthorize() {
    console.log(wx);
    wx.navigateTo({
      url: "/pages/authorize"
    });
  }

  async getUserInfo(js_code) {
    console.log("getUserInfo called");
    try {
      let getUserInfo = await wepy.getUserInfo();
      console.log("wepy.getUserInfo() SUCCESS", getUserInfo);
      if (getUserInfo.errMsg === "getUserInfo:ok") {
        wepy.setStorageSync(USER_INFO, getUserInfo.userInfo);
        this.getToken(js_code, getUserInfo);
      }
    } catch (error) {
      console.error("wepy.getUserInfo() ERROR", error);
    }
  }

  async wxlogin() {
    console.log("wxlogin called");
    try {
      let login = await wepy.login();
      console.log("wepy.login() SUCCESS", login);
      this.getUserInfo(login.code);
    } catch (error) {
      console.error("wepy.login() ERROR", error);
    }
  }

  async getToken(js_code, userInfo) {
    try {
      let auth = await api.wxJsCode2Token({
        query: {
          js_code: js_code,
          encryptedData: userInfo.encryptedData,
          iv: userInfo.iv,
          userInfo: wepy.getStorageSync(USER_INFO),
          union_tagtrack_id: wepy.getStorageSync(TAGTRACK_ID) || ""
        }
      });
      console.log("api.wxJsCode2Token() SUCCESS", auth);

      if (auth.data.success) {
        if (auth.data.wx_openid && auth.data.wx_unionid) {
          wepy.setStorageSync(USER_SPECICAL_INFO, auth.data);
        }
      }
    } catch (error) {
      console.error("api.wxJsCode2Token() ERROR", error);
    }
  }

  async getTokenWithUnionId(union_id) {
    try {
      let auth = await api.wxJsCode2Token({
        query: {
          union_id: union_id
        },
        method: "POST"
      });
      console.log("api.wxJsCode2Token() SUCCESS", auth);
      if (auth.data.success) {
        if (auth.data.wx_openid && auth.data.wx_unionid) {
          wepy.setStorageSync(USER_SPECICAL_INFO, auth.data);
        }
      } else {
        console.error("auth.data.error", auth.data.error);
        wepy.navigateTo({
          url: "/pages/authorize"
        });
      }
    } catch (error) {
      console.error("api.wxJsCode2Token() ERROR", error);
    }
  }
}
</script>
